name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint

  unit:
    name: Unit
    needs: [lint]
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu]
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT    # - name: Cache
      shell: bash
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
    - name: Install itself
      run: |
        pip install .
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        make test
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  check:  # This job does nothing and is only used for the branch protection
    if: always()
    name: CI Checks
    needs: [lint, unit]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  deploy:
    name: Deploy on PyPI
    needs: check
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/prod.txt
    - name: Build dists
      run: |
        flit build
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: aiohttp-remotes
        version_file: aiohttp_remotes/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_TOKEN }}
        dist_dir: dist
        fix_issue_regex: '\(`#(\\d+) <https://github.com/aio-libs/aiohttp-remotes/issues/\\1>`_\)'
        fix_issue_repl: "(#\\1)"
